{"version":3,"file":"index.js","sources":["../../electron/env.ts","../../electron/main/index.ts"],"sourcesContent":["import { join } from \"path\";\nimport { type, platform, tmpdir } from 'os'\n\n// Restituisce il percorso del file corrente.\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\n\n// Restituisce il percorso del file corrente.\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\n\n// Restituisce il percorso del file corrente.\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST\n\n\n// Restituisce il nome del sistema operativo come 'Linux' on Linux, 'Darwin' on macOS, and 'Windows_NT' on Windows.\nprocess.env.TYPE = type()\n\n// Restituisce la directory predefinita del sistema operativo per i file temporanei come stringa.\nprocess.env.TEMP_DIR = tmpdir()\n\n// Restituisce una stringa che identifica la piattaforma del sistema operativo per la quale Ã¨ stato compilato il binario Node.js ['aix', 'darwin', 'freebsd','linux', 'openbsd', 'sunos', and 'win32']\nprocess.env.PLATFORM = platform()  ","import { app, BrowserWindow, shell, ipcMain, Notification } from 'electron';\nimport { join } from 'path';\nimport '../env';\nimport dotenv from 'dotenv';\n\nimport { IpcMainEndpoints } from './events/endpoints';\n\ndotenv.config();\n\nlet pid = null\n\nlet win: BrowserWindow | null = null\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js')\nconst url = process.env.VITE_DEV_SERVER_URL\nconst indexHtml = join(process.env.DIST, 'index.html')\n\n\nconst quitApp: Function = (): void => {\n  // before quit\n  // window all closed\n  console.log('Closed Window')\n  win = null\n  app.quit()\n}\n\n/**\n * Service Notification\n */\nlet MSG = {\n  title: 'Boilerplate Electron Vue Vite',\n  body: 'Application Connected',\n  icon: ''\n}\n\n/**\n * Method Service Notification\n */\nconst showNotification = () => new Notification({ title: MSG.title, body: MSG.body, icon: MSG.icon }).show()\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Boilerplate Electron Vue Vite',\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  })\n\n\n  win.setMinimumSize(1280, 800)\n\n  if (process.env.VITE_DEV_SERVER_URL) { // electron-vite-vue#298\n    win.loadURL(url)\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools()\n  } else {\n    win.loadFile(indexHtml)\n  }\n\n  // IpcMainEndpoints for IPCMAIN: call all ipcMain from preload with ffi\n  IpcMainEndpoints()\n\n  if (process.env.PLATFORM === \"win32\") {\n    // Message notification for windows\n    MSG.title = 'WIN32'\n  } else {\n    // Message notification for Unix\n    MSG.title = 'UNIX'\n  }\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url)\n    return { action: 'deny' }\n  })\n}\n\napp.whenReady()\n  .then(createWindow)\n  .then(showNotification)\n\napp.once('ready', async () => {\n  pid = process.pid\n  console.log('#####[pid]', pid)\n})\n\napp.on('window-all-closed', () => {\n  quitApp()\n})\n\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  })\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg })\n  }\n})"],"names":["join","type","tmpdir","platform","app","Notification","BrowserWindow","url","shell","ipcMain"],"mappings":";;;;;AAIA,QAAQ,IAAI,gBAAgBA,KAAK,KAAA,WAAW,IAAI;AAGhD,QAAQ,IAAI,OAAOA,KAAA,KAAK,QAAQ,IAAI,eAAe,SAAS;AAG5D,QAAQ,IAAI,SAAS,QAAQ,IAAI,sBAC7BA,KAAA,KAAK,QAAQ,IAAI,eAAe,WAAW,IAC3C,QAAQ,IAAI;AAIhB,QAAQ,IAAI,OAAOC,GAAAA;AAGnB,QAAQ,IAAI,WAAWC,GAAAA;AAGvB,QAAQ,IAAI,WAAWC,YAAS;ACfhC,OAAO,OAAO;AAEd,IAAI,MAAM;AAEV,IAAI,MAA4B;AAEhC,MAAM,UAAUH,KAAK,KAAA,WAAW,qBAAqB;AACrD,MAAM,MAAM,QAAQ,IAAI;AACxB,MAAM,YAAYA,KAAA,KAAK,QAAQ,IAAI,MAAM,YAAY;AAGrD,MAAM,UAAoB,MAAY;AAGpC,UAAQ,IAAI,eAAe;AACrB,QAAA;AACNI,WAAA,IAAI,KAAK;AACX;AAKA,IAAI,MAAM;AAAA,EACR,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AACR;AAKA,MAAM,mBAAmB,MAAM,IAAIC,SAAa,aAAA,EAAE,OAAO,IAAI,OAAO,MAAM,IAAI,MAAM,MAAM,IAAI,KAAM,CAAA,EAAE;AAEtG,eAAe,eAAe;AAC5B,QAAM,IAAIC,SAAAA,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB;AAAA,EAAA,CACD;AAGG,MAAA,eAAe,MAAM,GAAG;AAExB,MAAA,QAAQ,IAAI,qBAAqB;AACnC,QAAI,QAAQ,GAAG;AAEf,QAAI,YAAY;EAAa,OACxB;AACL,QAAI,SAAS,SAAS;AAAA,EACxB;AAKI,MAAA,QAAQ,IAAI,aAAa,SAAS;AAEpC,QAAI,QAAQ;AAAA,EAAA,OACP;AAEL,QAAI,QAAQ;AAAA,EACd;AAGA,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAC,WAAU;AAC5CA,QAAAA,KAAI,WAAW,QAAQ;AAAGC,qBAAM,aAAaD,IAAG;AAC7C,WAAA,EAAE,QAAQ;EAAO,CACzB;AACH;AAEAH,SAAAA,IAAI,UACD,EAAA,KAAK,YAAY,EACjB,KAAK,gBAAgB;AAExBA,SAAAA,IAAI,KAAK,SAAS,YAAY;AAC5B,QAAM,QAAQ;AACN,UAAA,IAAI,cAAc,GAAG;AAC/B,CAAC;AAEDA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AACxB;AACV,CAAC;AAGDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,KAAK;AAEP,QAAI,IAAI,YAAY;AAAG,UAAI,QAAQ;AACnC,QAAI,MAAM;AAAA,EACZ;AACF,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AACjB,QAAA,aAAaE,uBAAc;AACjC,MAAI,WAAW,QAAQ;AACV,eAAA,CAAC,EAAE;EAAM,OACf;AACQ;EACf;AACF,CAAC;AAGDG,SAAA,QAAQ,OAAO,YAAY,CAAC,GAAG,QAAQ;AAC/B,QAAA,cAAc,IAAIH,uBAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB;AAAA,EAAA,CACD;AAEG,MAAA,QAAQ,IAAI,qBAAqB;AACnC,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EAAA,OAC9B;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAK,CAAA;AAAA,EAC/C;AACF,CAAC;"}